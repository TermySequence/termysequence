# Copyright Â© 2018 TermySequence LLC
#
# SPDX-License-Identifier: GPL-2.0-only

CMAKE_MINIMUM_REQUIRED(VERSION 3.9.0)
SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" ${CMAKE_MODULE_PATH})
CMAKE_POLICY(SET CMP0048 NEW)
INCLUDE(GNUInstallDirs)

PROJECT(termysequence VERSION 1.0.3)

OPTION(BUILD_SERVER "Build the server and monitor" ON)
OPTION(BUILD_QTGUI "Build the Qt client" ON)
OPTION(BUILD_TESTS "Build tests" OFF)
OPTION(MAINTAINER_MODE "Build maintainer utilities" OFF)
OPTION(USE_SYSTEMD "Enable systemd socket activation and sd-bus monitor" ON)
OPTION(USE_LIBGIT2 "Enable git file monitoring feature" ON)
OPTION(USE_FUSE "Enable FUSE remote file mounting feature" ON)
OPTION(MEMDEBUG "Enable heap debugging (Linux Debug only)" OFF)
OPTION(NATIVE_DIALOGS "Use native dialog boxes" ON)
OPTION(V8_STATIC "Link with static V8 libraries" OFF)
OPTION(INSTALL_SHELL_INTEGRATION "Install shell integration scripts" OFF)

IF (${CMAKE_BUILD_TYPE} MATCHES "Debug")
  SET(FRIENDLY_NAME "DebugSequence")
  SET(DEBUG_SUFFIX "d")
ELSE()
  SET(FRIENDLY_NAME "TermySequence")
  SET(NDEBUG 1)
ENDIF()

SET(ORG_NAME "TermySequence LLC")
SET(ORG_DOMAIN "termysequence.com")
SET(PRODUCT_DOMAIN "termysequence.io")
SET(PRODUCT_RDOMAIN "io.termysequence.")
SET(ENV_NAME "TERMYSEQUENCE")
SET(ABBREV_NAME termy)
SET(SERVER_NAME termy-server${DEBUG_SUFFIX})
SET(FORWARDER_NAME termy-forwrd${DEBUG_SUFFIX}) # Same length as SERVER_NAME
SET(MONITOR_NAME termy-monitor${DEBUG_SUFFIX})
SET(CONNECT_NAME termy-connect${DEBUG_SUFFIX})
SET(QUERY_NAME termy-query${DEBUG_SUFFIX})
SET(APP_NAME qtermy${DEBUG_SUFFIX})
SET(PIPE_NAME qtermy${DEBUG_SUFFIX}-pipe)
SET(SYSTEMD_SETUP_NAME ${ABBREV_NAME}-systemd-setup${DEBUG_SUFFIX})
SET(ICONTOOL_NAME "IconBlaster")

# Server runtime directories
SET(SERVER_XDG_DIR "%t/${SERVER_NAME}")
SET(SERVER_RUN_DIR "/run/user/%U/${SERVER_NAME}")
SET(SERVER_TMP_DIR "/tmp/${SERVER_NAME}%U")
# App runtime directories
SET(APP_XDG_DIR "%t/${APP_NAME}")
SET(APP_RUN_DIR "/run/user/%U/${APP_NAME}")
SET(APP_TMP_DIR "/tmp/${APP_NAME}%U")
# Name of socket file (used both server and app)
SET(SOCKET_FILE /sock)
# Name of pid file: must be shorter than SOCKET_FILE
SET(PID_FILE /pid)
# Documentation root URL
SET(DOCUMENTATION_ROOT "https://${PRODUCT_DOMAIN}/doc"
  CACHE STRING "Documentation root URL")

SET(CMAKE_CXX_STANDARD 14)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -Wall -Wno-sign-compare")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wno-sign-compare")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -rdynamic")

MESSAGE(STATUS "Building for ${CMAKE_SYSTEM_NAME} in ${CMAKE_BUILD_TYPE} mode")

FIND_PACKAGE(PkgConfig REQUIRED)

IF (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  IF (USE_SYSTEMD)
    FIND_PACKAGE(Systemd 235 REQUIRED)
  ENDIF()
  IF (NDEBUG)
    SET(MEMDEBUG 0)
  ENDIF()
ELSEIF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  SET(USE_SYSTEMD 0)
  SET(USE_FUSE 0)
ELSE()
  MESSAGE(FATAL_ERROR "Unsupported OS: ${CMAKE_SYSTEM_NAME}")
ENDIF()

SET(THREADS_PREFER_PTHREAD_FLAG ON)
FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(Uuid 2.30.1 REQUIRED)
FIND_PACKAGE(Utf8cpp REQUIRED)

CONFIGURE_FILE(common.h.in common.h)
INCLUDE_DIRECTORIES(BEFORE . ${PROJECT_BINARY_DIR})

FIND_PROGRAM(GITEXE git DOC "Git VCS")
FIND_FILE(GITDIR NAMES .git PATHS ${CMAKE_SOURCE_DIR} NO_DEFAULT_PATH)
SET(GITINFO ${PROJECT_BINARY_DIR}/gitinfo.h)

IF (GITEXE AND GITDIR)
  ADD_CUSTOM_COMMAND(OUTPUT ${GITINFO}
    DEPENDS gitinfo.h.in ${CMAKE_SOURCE_DIR}/gitinfo.sh ${GITDIR}/logs/HEAD
    COMMAND ${CMAKE_SOURCE_DIR}/gitinfo.sh --head ${GITINFO}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    VERBATIM)
ELSE()
  ADD_CUSTOM_COMMAND(OUTPUT ${GITINFO}
    DEPENDS gitinfo.h.in ${CMAKE_SOURCE_DIR}/gitinfo.sh
    COMMAND ${CMAKE_SOURCE_DIR}/gitinfo.sh --none ${GITINFO}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    VERBATIM)
ENDIF()

ADD_CUSTOM_TARGET(gitinfo DEPENDS ${GITINFO})

# GCC link-time optimization
FUNCTION(LTO_LIBRARY target)
  IF (NDEBUG AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    TARGET_COMPILE_OPTIONS(${target} PRIVATE -flto -ffat-lto-objects)
  ENDIF()
ENDFUNCTION()
FUNCTION(LTO_EXECUTABLE target)
  IF (NDEBUG AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    TARGET_COMPILE_OPTIONS(${target} PRIVATE -flto -fno-fat-lto-objects)
    SET_TARGET_PROPERTIES(${target} PROPERTIES LINK_FLAGS "-flto -fuse-linker-plugin")
  ENDIF()
ENDFUNCTION()
IF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  SET(CMAKE_AR "gcc-ar")
  SET(CMAKE_RANLIB "gcc-ranlib")
ENDIF()

ADD_SUBDIRECTORY(lib)
ADD_SUBDIRECTORY(os)
IF (BUILD_SERVER)
  ADD_SUBDIRECTORY(mon)
  ADD_SUBDIRECTORY(mux)
ENDIF()
IF (BUILD_QTGUI)
  ADD_SUBDIRECTORY(src)
ENDIF()
ADD_SUBDIRECTORY(doc)
ADD_SUBDIRECTORY(vendor)
IF (MAINTAINER_MODE)
  ADD_SUBDIRECTORY(util)
ENDIF()
IF (BUILD_TESTS)
  ENABLE_TESTING()
  ADD_SUBDIRECTORY(test)
ENDIF()
